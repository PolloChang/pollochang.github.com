<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD on PolloChang 工作筆記</title>
    <link>http://pollochang.work/categories/ci/cd/</link>
    <description>Recent content in CI/CD on PolloChang 工作筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language><atom:link href="http://pollochang.work/categories/ci/cd/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SonarQube-API</title>
      <link>http://pollochang.work/worknot/sonarqube-api/</link>
      <pubDate>Fri, 04 Oct 2024 23:44:47 +0800</pubDate>
      
      <guid>http://pollochang.work/worknot/sonarqube-api/</guid>
      <description>基本 URL: http:///api 如何驗證 創建 API Token 登入到 SonarQube 的 Web 界面。 點擊右上角的你的使用者名稱，然後選擇 “我的帳戶 (My Account)”。 在 “安全 (Security)” 標籤中，你會看到一個按鈕 “生成令牌 (Generate Tokens)”。 給令牌命名並點擊生成。生成後記下這個令牌，因為你無法再次查看它。 使用帳號驗證 curl -k -u &amp;lt;your-token&amp;gt;: &amp;#39;&amp;lt;your-sonarqube-instance/projects/search&amp;#39; 使用 HTTP Authorization Header 以下範例將使用 Authorization Header 方式驗證，方變程式化使用
curl -k -H &amp;#34;Authorization: Bearer &amp;lt;your-token&amp;gt;&amp;#34; &amp;#39;&amp;lt;your-sonarqube-instance/projects/search&amp;#39; 使用API查詢資料 列出所有的 project-key 路徑: /api/projects/search curl -k -H &amp;#34;Authorization: Bearer &amp;lt;your-token&amp;gt;&amp;#34; &amp;#39;&amp;lt;your-sonarqube-instance/projects/search&amp;#39; 列出專案 服務 目前的弱點數量 curl -k -H &amp;#34;Authorization: Bearer &amp;lt;your-token&amp;gt;&amp;#34; &amp;#39;https://&amp;lt;your-sonarqube-instance&amp;gt;/api/issues/search?componentKeys=&amp;lt;project-key&amp;gt;&amp;amp;types=VULNERABILITY&amp;amp;resolved=false&amp;#39; 列出歷次掃描的點數量 路徑: /api/measures/search_history curl -k -H &amp;#34;Authorization: Bearer &amp;lt;your-token&amp;gt;&amp;#34; &amp;#39;&amp;lt;your-sonarqube-instance/measures/search_history?</description>
    </item>
    
    <item>
      <title>在 Linux 安裝 JMeter</title>
      <link>http://pollochang.work/worknot/install-jmetet-on-linux/</link>
      <pubDate>Thu, 29 Aug 2024 12:03:56 +0800</pubDate>
      
      <guid>http://pollochang.work/worknot/install-jmetet-on-linux/</guid>
      <description>安裝 Down jMeter and deploy it. JMETER_VERSION=&amp;#34;5.6.3&amp;#34; wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz # 只給自己帳號使用 tar -zxf apache-jmeter-${JMETER_VERSION}.tgz -C ~/.local/share/ cd ~/.local/share/ ln -s apache-jmeter-${JMETER_VERSION} apache-jmeter setting Desktop Entry for JMeter JMETER_HOME=${HOME}/.local/share/apache-jmeter # download JMeter icon to this logo wget -o ${JMETER_HOME}/logo.svg https://jmeter.apache.org/images/jmeter_square.svg tee ${HOME}/.local/share/applications/apache-jmeter.desktop &amp;lt;&amp;lt;EOF [Desktop Entry] Version=1.0 Type=Application Name=apache-jmeter Path=${JMETER_HOME} Icon=${JMETER_HOME}/logo.svg Exec=${JMETER_HOME}/bin/jmeter.sh Comment=apache-jmeter Categories=Development; Terminal=false EOF # check had created it cat ${HOME}/.local/share/applications/apache-jmeter.desktop 安裝 plugin jpgc-casutg JMETER_HOME=${HOME}/.local/share/apache-jmeter wget https://jmeter-plugins.org/files/packages/jpgc-casutg-2.10.zip unzip -q jpgc-casutg-2.10.zip -d ${JMETER_HOME} wget -o ${JMETER_HOME}/logo.</description>
    </item>
    
    <item>
      <title>透過 Jenkins Pipeline 執行 SonarQube 源碼掃描</title>
      <link>http://pollochang.work/worknot/jenkins-sonarqube-pipeline-20240810-1/</link>
      <pubDate>Sat, 10 Aug 2024 11:44:47 +0800</pubDate>
      
      <guid>http://pollochang.work/worknot/jenkins-sonarqube-pipeline-20240810-1/</guid>
      <description>環境準備 安裝 SonarQube Server jenknins plugin: SonarQube Scanner SonarQube Generate SonarQube Token My Account -&amp;gt; Security -&amp;gt; Generate Tokens
jenkins 設定 環境 Manage Jenkins &amp;gt; Manage Credentials manage &amp;gt; system &amp;gt; SonarQube servers manage &amp;gt; system Tools &amp;gt; SonarQube Scanner 專案 pipline 已下為 grails 專案設定 node { env.SONAR_USER_HOME=&amp;#34;${JENKINS_HOME}&amp;#34; env.JAVA_HOME=&amp;#34;${tool &amp;#39;openjdk-17&amp;#39;}&amp;#34; env.GRAILS_HOME=&amp;#34;/usr/local/lib/grails/grails-5.3.3&amp;#34; env.PATH=&amp;#34;${env.JAVA_HOME}/bin:${env.GRAILS_HOME}/bin:${env.PATH}&amp;#34; stage (&amp;#39;Checkout&amp;#39;) { git branch: &amp;#39;master&amp;#39;, credentialsId: &amp;#39;credentialsId&amp;#39;, url: &amp;#34;&amp;lt;git url&amp;gt;&amp;#34; } stage (&amp;#39;Build&amp;#39;) { sh &amp;#34;grails test war ${env.</description>
    </item>
    
    <item>
      <title>透過 Jenkins Pipeline 執行 Jmeter 進行壓力測試</title>
      <link>http://pollochang.work/worknot/jenkins-jmeter-pipeline-20240810-1/</link>
      <pubDate>Sat, 10 Aug 2024 08:31:14 +0800</pubDate>
      
      <guid>http://pollochang.work/worknot/jenkins-jmeter-pipeline-20240810-1/</guid>
      <description> Pipeline script node { stage(&amp;#34;set env&amp;#34;){ def BUILDVERSION = sh(script: &amp;#34;echo `date +%s`&amp;#34;, returnStdout: true).trim() //apache-jmeter目錄 env.JMETER_HOME=&amp;#34;/usr/local/share/apache-jmeter-5.5&amp;#34; env.JMETER_REPORT=&amp;#34;${BUILDVERSION}.jtl&amp;#34; env.JVM_ARGS=&amp;#34;-Xms10240m -Xmx10240m&amp;#34; //刪除之前測試結果 // deleteDir() } stage(&amp;#39;refresh jmx&amp;#39;){ } stage(&amp;#39;Run JMeter Tests&amp;#39;) { sh &amp;#34;/usr/local/share/apache-jmeter-5.5/bin/jmeter.sh -n -t /tmp/ntlcPublic.jmx -l ${JMETER_REPORT}&amp;#34; } stage(&amp;#39;Publish Performance Report&amp;#39;) { perfReport errorFailedThresholds: true, errorUnstableThresholds: true, sourceDataFiles: JMETER_REPORT, relativeFailedThresholdPositive: &amp;#39;90&amp;#39;, relativeUnstableThresholdPositive: &amp;#39;80&amp;#39;, threshold: [ thresholdName: &amp;#39;Average Response Time&amp;#39;, unstableThreshold: &amp;#39;1500&amp;#39;, failedThreshold: &amp;#39;3000&amp;#39; ] } } perfReport 說明 relativeFailedThresholdPositive: &amp;lsquo;90&amp;rsquo; 指定了如果 90% 或更多的請求的響應時間超過 failedThreshold，構建將失敗。 relativeUnstableThresholdPositive: &amp;lsquo;80&amp;rsquo; 指定了如果 80% 或更多的請求的響應時間超過 unstableThreshold，構建將被標記為不穩定。 threshold 配置了具體的響應時間閾值（如「平均響應時間」）。在這裡，如果平均響應時間超過 1500 毫秒，構建將被標記為不穩定；如果超過 3000 毫秒，構建將失敗。 </description>
    </item>
    
    <item>
      <title>JMeter</title>
      <link>http://pollochang.work/worknot/jmeter-20240809-1/</link>
      <pubDate>Fri, 09 Aug 2024 22:18:32 +0800</pubDate>
      
      <guid>http://pollochang.work/worknot/jmeter-20240809-1/</guid>
      <description>JMeter 簡介: 是一款開源的壓力測試工具
jmeter定時器 Constant Timer 固定定時器 Uniform Random Timer 均勻隨機定時器 Constant Throughput Timer 固定吞吐量定時器 Gaussian Random Timer 高斯隨機定時器 Deviation (in milliseconds): The number shows how much the delay can deviate from the given offset towards the higher and lower range. 時間偏移量
Constant Delay Offset (in milliseconds): The number shows a constant delay which will be added in a random number generated by the Gaussian Function in the range of the given deviation value.</description>
    </item>
    
    <item>
      <title>jenkins 安裝</title>
      <link>http://pollochang.work/worknot/jenkins-install/</link>
      <pubDate>Sun, 05 May 2024 12:03:56 +0800</pubDate>
      
      <guid>http://pollochang.work/worknot/jenkins-install/</guid>
      <description>環境 OS: Debian 12, Oracle Linux 9 jenkins version: 2.462.1 jre: adoptium jre 17 安裝 安裝必要package Debian sudo apt install -y fontconfig tar zip git wget Oracle Linux 9 sudo dnf install -y fontconfig tar zip git wget 部屬 tomcat 安裝 jre 從 adoptium 官方網站下載 java 17 安裝 jre sudo mkdir -p /usr/local/lib/jvm sudo tar -zxf ~/OpenJDK17U-jre_x64_linux_hotspot_17.0.12_7.tar.gz -C /usr/local/lib/jvm cd /usr/local/lib/jvm/ sudo ln -s jdk-17.0.12+7-jre jre-17-latest 安裝 tomcat 設定使用者 sudo useradd --system -r tomcat -s /sbin/nologin sudo useradd --system -r jenkins -s /bin/bash passwd jenkins sudo usermod -a -G tomcat jenkins visudo tee /etc/sudoers.</description>
    </item>
    
  </channel>
</rss>
